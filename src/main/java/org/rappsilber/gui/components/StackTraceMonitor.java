/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.rappsilber.gui.components;

import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.SwingUtilities;
import javax.swing.text.DefaultFormatter;
import org.rappsilber.utils.UStackTraces;

/**
 *
 * @author Lutz Fischer <lfischer@staffmail.ed.ac.uk>
 */
public class StackTraceMonitor extends javax.swing.JFrame {

    java.util.Timer m_scanTimer;
    private int m_timeout = 5000;
    
    
    /**
     * Creates new form StackTraceMonitor
     */
    public StackTraceMonitor() {
        initComponents();
        
        spTimer.setValue(new Double(m_timeout/1000));
        setupTimer();
        JComponent comp = spTimer.getEditor();
        JFormattedTextField field = (JFormattedTextField) comp.getComponent(0);
        DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
        formatter.setCommitsOnValidEdit(true);
        for (Long id :  UStackTraces.getThreadIds()) {
            cbThreadSelect.addItem(id.toString());
        }
    }

    private void setupTimer() {
        
        TimerTask scanner  =new TimerTask() {
            int lastLength=0;
            @Override
            public void run() {
                long id = -1;
                String np = null;
                String selectedThread = cbThreadSelect.getSelectedItem().toString();
                if (!selectedThread.toLowerCase().contentEquals("all")) {
                    try {
                        id = Long.parseLong(selectedThread);
                    } catch (Exception e) {
                        np = selectedThread;
                    }
                }
                boolean  excludeDaemon = ckExcludeDaemon.isSelected();
                String stFirst = UStackTraces.getStackTraces(id, np, excludeDaemon).toString();
                if (id>0) {
                    int lines = stFirst.length() - stFirst.replaceAll("\n", "").length();
                    if (lastLength < lines) 
                        lastLength = lines;
                    while (lines < lastLength) {
                        lines++;
                        stFirst="\n"+stFirst;
                    }
                }
                final String st = stFirst;
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        StackTraceMonitor.this.txtStacktrace.setText(st);
                    }
                });
            }
        };
        if (m_scanTimer != null) {
            m_scanTimer.cancel();
            m_scanTimer.purge();
        }
        m_scanTimer = new java.util.Timer("Timer - StackTraceScan",true);
        m_scanTimer.scheduleAtFixedRate(scanner, 0, m_timeout);

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnClose = new javax.swing.JButton();
        spStackTrace = new javax.swing.JScrollPane();
        txtStacktrace = new javax.swing.JTextArea();
        spTimer = new javax.swing.JSpinner();
        lTimer = new javax.swing.JLabel();
        cbThreadSelect = new javax.swing.JComboBox<>();
        ckExcludeDaemon = new javax.swing.JCheckBox();

        setTitle("StackTrace Monitor");

        btnClose.setText("close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txtStacktrace.setColumns(20);
        txtStacktrace.setRows(5);
        spStackTrace.setViewportView(txtStacktrace);

        spTimer.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.1d, null, 1.0d));
        spTimer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spTimerStateChanged(evt);
            }
        });
        spTimer.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                spTimerPropertyChange(evt);
            }
        });

        lTimer.setText("Update Interval");

        cbThreadSelect.setEditable(true);
        cbThreadSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        ckExcludeDaemon.setText("exclude daemon");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spStackTrace)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lTimer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbThreadSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckExcludeDaemon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spStackTrace, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(spTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lTimer)
                    .addComponent(cbThreadSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckExcludeDaemon))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void spTimerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_spTimerPropertyChange

    }//GEN-LAST:event_spTimerPropertyChange

    private void spTimerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spTimerStateChanged
        int newTimeout = (int)(((Double)spTimer.getValue()) * 1000);
        if (newTimeout != m_timeout) {
            m_timeout = newTimeout;
            setupTimer();
        }
    }//GEN-LAST:event_spTimerStateChanged

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StackTraceMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StackTraceMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StackTraceMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StackTraceMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StackTraceMonitor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JComboBox<String> cbThreadSelect;
    private javax.swing.JCheckBox ckExcludeDaemon;
    private javax.swing.JLabel lTimer;
    private javax.swing.JScrollPane spStackTrace;
    private javax.swing.JSpinner spTimer;
    public javax.swing.JTextArea txtStacktrace;
    // End of variables declaration//GEN-END:variables
}
